#!/bin/bash
set -eu

MASTERS=$(  spruce merge $INPUTS stencil.yml | spruce json | jq -r '.tweed.calculated.masters')
REPLICAS=$( spruce merge $INPUTS stencil.yml | spruce json | jq -r '.tweed.calculated.replicas')
INSTANCES=$(spruce merge $INPUTS stencil.yml | spruce json | jq -r '.tweed.calculated.instances')

echo
echo "GENERATING CREDENTIALS"
echo "======================"
if ! safe exists $VAULT/auth:password; then
	echo ">> generating a new, random, auth password"
	safe set $VAULT/auth password=k/$(uuidgen | tr A-Z a-z | cut -d - -f 1) >/dev/null
fi

PASSWORD=$(safe get $VAULT/auth:password)

case $INFRASTRUCTURE_TYPE in
kubernetes)
  export KUBECONFIG=$INFRASTRUCTURE
  NS=$(spruce merge $INPUTS stencil.yml | spruce json | jq -r '.tweed.k8s.ns')

  echo
  echo "RENDERING RESOURCE TEMPLATES"
  echo "============================"
  mkdir -p out/
  (for what in ns cm svc ss; do
   echo >&2 ">> rendering k8s/$what.yml ..."
   echo '---'
   spruce merge --prune tweed \
     $INPUTS \
     stencil.yml \
     k8s/$what.yml
   done) > out/spec.yml

  echo
  echo "kubernetes spec generated!"
  echo ">> applying out/spec.yml via \`kubectl'..."
  kubectl apply -f out/spec.yml
  echo
  echo ">> waiting for redis statefulset to become 'ready'..."
  kubectl -n $NS rollout status statefulset redis
  echo "done."
  echo
  kubectl -n $NS get all
  echo
  echo

  NODES=$(kubectl get nodes -o json | jq -Mr '.items[].status.addresses[] | select(.type == "ExternalIP") | .address' | sort)
  PORT=$(kubectl get -n $NS service/redis -o jsonpath --template '{.spec.ports[0].nodePort}')
  ;;

bosh)
  . $INFRASTRUCTURE
  DEPLOYMENT=$(spruce merge $INPUTS stencil.yml | spruce json | jq -r '.tweed.bosh.deployment')

  echo
  echo "RENDERING BOSH MANIFESTS"
  echo "========================"
  mkdir -p out/
  spruce merge --prune tweed \
    $INPUTS \
    stencil.yml \
    bosh/deployment.yml > out/manifest.yml
  echo
  echo "bosh deployment manifet generated!"
  echo ">> deploying out/manifest.yml via \`bosh'..."
  bosh -d $DEPLOYMENT delete-deployment -n >/dev/null 2>&1 || true
  bosh -d $DEPLOYMENT deploy -n --no-redact out/manifest.yml >&2

  NODES=$(bosh -d $DEPLOYMENT vms --json | jq -Mr '.Tables[0].Rows[].ips' | sort)
  PORT=6379
  ;;

*)
  echo "BAD"
  exit 1
esac

echo
echo "CONFIGURING REDIS CLUSTER"
echo "========================="
echo ">> using $MASTERS masters"
echo ">> with $REPLICAS replicas"
echo ">> across  $INSTANCES redis instances"
echo
kubectl -n $NS exec -it redis-0 -- redis-cli -a $PASSWORD --cluster create --cluster-replicas $REPLICAS $(kubectl -n $NS get pods -o jsonpath='{range.items[*]}{.status.podIP}:6379 ') --cluster-yes


echo
echo "VERIFYING REDIS FUNCTIONALITY"
echo "============================="
echo
echo ">> checking the following redis endpoints:"
for node in $NODES; do
	echo "     - $node:$PORT"
done
echo

for node in $NODES; do
	echo "----[ $node:$PORT ]----------------"
	redis-cli -h $node -p $PORT -a $PASSWORD role 2>&1
	echo
	echo
done

echo "done."
